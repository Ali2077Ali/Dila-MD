const { cmd } = require('../command');
const sensitiveData = require('../dila_md_licence/a/b/c/d/dddamsbs');

let welcomeEnabled = false; // Track if welcome messages are enabled
let welcomeAlertEnabled = false; // Track if welcome alerts (private messages) are enabled
let welcomeListenerRegistered = false; // Track if the welcome listener is registered

// Function to send welcome message to the group (for multiple participants)
const sendWelcomeMessage = async (conn, groupId, participants) => {
    const groupMetadata = await conn.groupMetadata(groupId); // Fetch group metadata
    const groupName = groupMetadata.subject; // Get group name
    
    // Create mentions and build the welcome message with all participants
    const mentions = participants.map(participant => participant);
    const welcomeMessage = `ùóõùó≤ùòÜ ‚ô•Ô∏èü´Ç\n${mentions.map(memberId => `@${memberId.split('@')[0]}`).join('\n')}\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}* üéâ\nÀ¢·µâ·µâ ·µç ≥·µí·µò·µñ ·µà·µâÀ¢·∂ú ≥‚Å±·µñ·µó‚Å±·µí‚Åø\n${sensitiveData.footerText}`;

    await conn.sendMessage(groupId, { text: welcomeMessage, mentions });
};

// Function to send a private alert message to new members
const sendPrivateWelcomeAlert = async (conn, groupId, memberId) => {
    const groupMetadata = await conn.groupMetadata(groupId); // Fetch group metadata
    const groupName = groupMetadata.subject; // Get group name
    const groupDescription = groupMetadata.desc || 'No description available'; // Get group description
    const privateAlertMessage = `ùóõùó≤ùòÜ @${memberId.split('@')[0]},\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}* üéâ\nùó•ùó≤ùóÆùó± ùòÅùóµùó∂ùòÄ : ${groupDescription}\n${sensitiveData.footerText}`;

    await conn.sendMessage(memberId, { text: privateAlertMessage, mentions: [memberId] });
};

// Event listener for new group participants
const registerGroupWelcomeListener = (conn) => {
    if (welcomeListenerRegistered) return; // Prevent multiple registrations
    welcomeListenerRegistered = true; // Mark the listener as registered

    conn.ev.on('group-participants.update', async (update) => {
        const { id, participants, action } = update; // id = group id, participants = new members, action = add/remove
        if (action === 'add') {  // New members added
            if (welcomeEnabled) await sendWelcomeMessage(conn, id, participants); // Send group welcome message
            if (welcomeAlertEnabled) { // Send private welcome alerts
                participants.forEach(async (participant) => {
                    await sendPrivateWelcomeAlert(conn, id, participant);
                });
            }
        }
    });
};

// Command to enable welcome messages in group
cmd({ pattern: "welcomeon", react: "üéâ", desc: "Enable welcome messages for new group members", category: "group", use: '.welcomeon', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeEnabled = true; // Enable group welcome messages
        registerGroupWelcomeListener(conn); // Ensure listener is registered
        reply('Group welcome messages have been enabled! üéâ');
    } catch (e) {
        reply('Error enabling welcome messages. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to disable welcome messages
cmd({ pattern: "welcomeoff", react: "‚ùå", desc: "Disable welcome messages for new group members", category: "group", use: '.welcomeoff', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeEnabled = false; // Disable group welcome messages
        reply('Group welcome messages have been disabled! ‚ùå');
    } catch (e) {
        reply('Error disabling welcome messages. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to enable welcome alerts (private message to new members)
cmd({ pattern: "welcomealerton", react: "üîî", desc: "Enable welcome alerts for new group members", category: "group", use: '.welcomealerton', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeAlertEnabled = true; // Enable private welcome alerts
        registerGroupWelcomeListener(conn); // Ensure listener is registered
        reply('Private welcome alerts have been enabled! üîî');
    } catch (e) {
        reply('Error enabling welcome alerts. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to disable welcome alerts (private message to new members)
cmd({ pattern: "welcomealertoff", react: "üîï", desc: "Disable welcome alerts for new group members", category: "group", use: '.welcomealertoff', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeAlertEnabled = false; // Disable private welcome alerts
        reply('Private welcome alerts have been disabled! üîï');
    } catch (e) {
        reply('Error disabling welcome alerts. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to display welcome instructions
cmd({ pattern: "welcome", react: "üëë", desc: "Display group welcome commands", category: "group", use: '.welcome', filename: __filename },
async (conn, mek, m, { from, isGroup, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        
        const welcomeInfo = `üëë ùóóùóúùóüùóî ùó†ùóó ùóöùó•ùó¢ùó®ùó£ ùó™ùóòùóüùóñùó¢ùó†ùóò üëë\n\n‚ú® ùöÜùöéùöïùöåùöòùöñùöé ùöòùöó ‚ú®\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö ùöòùöó ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._\n     üí† \`.welcomeon\`\n\nüåë ùöÜùöéùöïùöåùöòùöñùöé ùöòùöèùöè üåë\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö off ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._\n     üí† \`.welcomeoff\`\n\nüì¨ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôΩ üì¨\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._\n     üí† \`.welcomealerton\`\n\nüì™ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôµùôµ üì™\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂±‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._\n     üí† \`.welcomealertoff\`\n\nüìù ùô≤ùöëùöäùöóùöêùöé ùö†ùöéùöïùöåùöòùöñùöé ùôºùöÇùô∂ üìù\n> _‡∂î‡∂∂‡∑ö ‡∑Ñ‡∑í‡∂≠‡∑î‡∂∏‡∂±‡∑è‡∂¥‡∑ô‡∂ß ‡∂î‡∂∂ ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í welcome msg ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫..._\n     üí† \`.welcomemsg (text)\`\n\nüßê ùô∂ùöõùöòùöûùöô ùö†ùöéùöïùöåùöòùöñùöé ùöúùöùùöäùöùùöûùöú üßê\n> _‡∂Ø‡∑ê‡∂±‡∂ß ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∑Ö ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫..._\n     üí† \`.welcomestates\`\n\n${sensitiveData.footerText}`;
        reply(welcomeInfo);
    } catch (e) {
        reply('Error displaying welcome information. ‚ö†Ô∏è');
        console.log(e);
    }
});
