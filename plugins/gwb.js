const { cmd } = require('../command');
const sensitiveData = require('../dila_md_licence/a/b/c/d/dddamsbs');

let welcomeEnabled = false; // Variable to track if welcome messages are enabled
let welcomeAlertEnabled = false; // Variable to track if welcome alerts are enabled

// Function to send welcome message to the group
const sendWelcomeMessage = async (conn, groupId, memberId) => {
    const groupMetadata = await conn.groupMetadata(groupId); // Fetch group metadata to get the group name
    const groupName = groupMetadata.subject; // Get the group name from metadata
    const welcomeMessage = `ùóõùó≤ùòÜ @${memberId.split('@')[0]},\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}* üéâ\nÀ¢·µâ·µâ ·µç ≥·µí·µò·µñ ·µà·µâÀ¢·∂ú ≥‚Å±·µñ·µó‚Å±·µí‚Åø\n${sensitiveData.footerText}`;
    
    await conn.sendMessage(groupId, { text: welcomeMessage, mentions: [memberId] });
};

// Function to send a private welcome alert to the new member
const sendWelcomeAlert = async (conn, groupId, memberId) => {
    const groupMetadata = await conn.groupMetadata(groupId); // Fetch group metadata to get the group name and description
    const groupName = groupMetadata.subject; // Group name
    const groupDescription = groupMetadata.desc || 'No description provided.'; // Group description
    const alertMessage = `ùóõùó≤ùòÜ @${memberId.split('@')[0]},\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}*\nùó•ùó≤ùóÆùó± ùòÅùóµùó∂ùòÄ:\n*${groupDescription}*\n\n${sensitiveData.footerText}`;
    
    await conn.sendMessage(memberId, { text: alertMessage, mentions: [memberId] });
};

// Event listener for new group participants
const registerGroupWelcomeListener = (conn) => {
    conn.ev.on('group-participants.update', async (update) => {
        const { id, participants, action } = update; // id = group id, participants = new members, action = add/remove
        if (action === 'add') {
            participants.forEach(async (participant) => {
                if (welcomeEnabled) {
                    await sendWelcomeMessage(conn, id, participant);  // Send welcome message to the group
                }
                if (welcomeAlertEnabled) {
                    await sendWelcomeAlert(conn, id, participant);  // Send private alert to the new member
                }
            });
        }
    });
};

// Command to enable welcome messages in group
cmd({ pattern: "welcomeon", react: "üéâ", desc: "Enable welcome messages for new group members", category: "group", use: '.welcomeon', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeEnabled = true; // Set welcome messages to enabled
        registerGroupWelcomeListener(conn); // Ensure listener is registered
        reply('Welcome messages have been enabled! üéâ');
    } catch (e) {
        reply('Error enabling welcome messages. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to disable welcome messages in group
cmd({ pattern: "welcomeoff", react: "‚ùå", desc: "Disable welcome messages for new group members", category: "group", use: '.welcomeoff', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeEnabled = false; // Set welcome messages to disabled
        reply('Welcome messages have been disabled! ‚ùå');
    } catch (e) {
        reply('Error disabling welcome messages. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to enable private alerts for new members
cmd({ pattern: "welcomealerton", react: "üì¨", desc: "Enable welcome alerts for new group members", category: "group", use: '.welcomealerton', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeAlertEnabled = true; // Set welcome alerts to enabled
        registerGroupWelcomeListener(conn); // Ensure listener is registered
        reply('Welcome alerts have been enabled! üì¨');
    } catch (e) {
        reply('Error enabling welcome alerts. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to disable private alerts for new members
cmd({ pattern: "welcomealertoff", react: "üì™", desc: "Disable welcome alerts for new group members", category: "group", use: '.welcomealertoff', filename: __filename },
async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ');
        if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è');
        
        welcomeAlertEnabled = false; // Set welcome alerts to disabled
        reply('Welcome alerts have been disabled! üì™');
    } catch (e) {
        reply('Error disabling welcome alerts. ‚ö†Ô∏è');
        console.log(e);
    }
});

// Command to display welcome instructions (accessible to anyone)
cmd({ pattern: "welcome", react: "üëë", desc: "Display group welcome commands", category: "group", use: '.welcome', filename: __filename },
async (conn, mek, m, { from, isGroup, reply }) => {
    try {
        if (!isGroup) return reply('This command can only be used in a group. üö´');
        
        const welcomeInfo = `
üëë ùóóùóúùóüùóî ùó†ùóó ùóöùó•ùó¢ùó®ùó£ ùó™ùóòùóüùóñùó¢ùó†ùóò üëë

‚ú® ùöÜùöéùöïùöåùöòùöñùöé ùöòùöó ‚ú®
> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö ùöòùöó ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._
     üí† \`.welcomeon\`

üåë ùöÜùöéùöïùöåùöòùöñùöé ùöòùöèùöè üåë
> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö off ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._
     üí† \`.welcomeoff\`

üì¨ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôΩ üì¨
> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._
     üí† \`.welcomealerton\`

üì™ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôµùôµ üì™
> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂±‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._
     üí† \`.welcomealertoff\`

üìë ùô∏ùöóùöúùöùùöõùöûùöåùöùùöíùöòùöóùöú üìë
> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂¥‡∑í‡∂Ω‡∑í‡∂∂‡∂≥ ‡∂±‡∑ì‡∂≠‡∑í ‡∑É‡∑Ñ ‡∂ª‡∑ì‡∂≠‡∑í, ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂ö‡∑ô‡∂ß‡∑í ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∑Ñ‡∑ù group description ‡∂ë‡∂ö ‡∂¥‡∑û‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂∏‡∑ô‡∂∏ options ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±._

·¥ç·¥Ä·¥Ö·¥á  ô è ·¥ç Ä ·¥Ö…™ ü·¥Ä ·¥èÍú∞·¥Ñ
`;

        reply(welcomeInfo);
    } catch (e) {
        reply('Error displaying welcome commands. ‚ö†Ô∏è');
        console.log(e);
    }
});
